{
  "name": "ai-input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { SendHorizontal, Paperclip, X, ChevronDown, Sparkles, Zap, Bot } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useFileInput } from \"@/hooks/use-file-input\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\n\r\ninterface FileDisplayProps {\r\n  fileName: string\r\n  onClear: () => void\r\n}\r\n\r\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\r\n  <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg border dark:border-white/10\">\r\n    <span className=\"text-sm dark:text-white truncate max-w-[200px]\">{fileName}</span>\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClear}\r\n      className=\"p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n    >\r\n      <X className=\"w-3 h-3 dark:text-white\" />\r\n    </button>\r\n  </div>\r\n)\r\n\r\nconst models = [\r\n  { id: \"gpt-4o\", name: \"GPT-4o\", icon: <Sparkles className=\"w-4 h-4 mr-2\" />, description: \"Most capable model\" },\r\n  { id: \"gpt-3.5\", name: \"GPT-3.5\", icon: <Zap className=\"w-4 h-4 mr-2\" />, description: \"Fast responses\" },\r\n  { id: \"claude-3\", name: \"Claude 3\", icon: <Bot className=\"w-4 h-4 mr-2\" />, description: \"Balanced performance\" },\r\n]\r\n\r\nexport default function AIInputAdvanced() {\r\n  const [inputValue, setInputValue] = useState<string>(\"\")\r\n  const [selectedModel, setSelectedModel] = useState(models[0])\r\n  const { fileName, fileInputRef, handleFileSelect, clearFile } = useFileInput({\r\n    accept: \"image/*,application/pdf\",\r\n    maxSize: 10,\r\n  })\r\n\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 60,\r\n    maxHeight: 240,\r\n  })\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(`Submitting to ${selectedModel.name}:`, inputValue, fileName ? \"with file\" : \"\")\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  const maxLength = 4000\r\n  const charCount = inputValue.length\r\n  const isNearLimit = charCount > maxLength * 0.8\r\n  const isAtLimit = charCount >= maxLength\r\n\r\n  return (\r\n    <div className=\"w-full py-4 px-2 sm:px-4\">\r\n      <div className=\"relative max-w-2xl w-full mx-auto flex flex-col gap-3\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <button className=\"flex items-center gap-1 text-sm font-medium px-3 py-1.5 rounded-lg hover:bg-black/5 dark:hover:bg-white/5 transition-colors\">\r\n                {selectedModel.icon}\r\n                {selectedModel.name}\r\n                <ChevronDown className=\"w-4 h-4 ml-1 opacity-70\" />\r\n              </button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"start\">\r\n              {models.map((model) => (\r\n                <DropdownMenuItem\r\n                  key={model.id}\r\n                  onClick={() => setSelectedModel(model)}\r\n                  className=\"flex items-start gap-2\"\r\n                >\r\n                  <div className=\"flex items-center\">{model.icon}</div>\r\n                  <div>\r\n                    <div className=\"font-medium\">{model.name}</div>\r\n                    <div className=\"text-xs text-muted-foreground\">{model.description}</div>\r\n                  </div>\r\n                </DropdownMenuItem>\r\n              ))}\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n\r\n          {fileName && <FileDisplay fileName={fileName} onClear={clearFile} />}\r\n        </div>\r\n\r\n        <div className=\"relative bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-200 dark:border-gray-800\">\r\n          <Textarea\r\n            placeholder={`Message ${selectedModel.name}...`}\r\n            className={cn(\r\n              \"bg-transparent w-full rounded-t-xl\",\r\n              \"border-x-0 border-t-0 border-b border-gray-200 dark:border-gray-800\",\r\n              \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"placeholder:text-gray-400 dark:placeholder:text-gray-500\",\r\n              \"text-black dark:text-white px-4 py-3\",\r\n              \"text-sm\",\r\n              \"max-h-[240px] overflow-y-auto resize-none\",\r\n              \"min-h-[60px]\",\r\n              isAtLimit && \"border-red-500 dark:border-red-500\",\r\n            )}\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              if (e.target.value.length <= maxLength) {\r\n                setInputValue(e.target.value)\r\n                adjustHeight()\r\n              }\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n            maxLength={maxLength}\r\n          />\r\n\r\n          <div className=\"flex items-center justify-between px-4 py-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"p-1.5 rounded-full hover:bg-black/5 dark:hover:bg-white/10 transition-colors\"\r\n                onClick={() => fileInputRef.current?.click()}\r\n              >\r\n                <Paperclip className=\"w-5 h-5 text-gray-500 dark:text-gray-400\" />\r\n                <span className=\"sr-only\">Attach file</span>\r\n              </button>\r\n\r\n              <input type=\"file\" className=\"hidden\" ref={fileInputRef} onChange={handleFileSelect} />\r\n\r\n              <div\r\n                className={cn(\r\n                  \"text-xs\",\r\n                  isNearLimit ? (isAtLimit ? \"text-red-500\" : \"text-amber-500\") : \"text-gray-400 dark:text-gray-500\",\r\n                )}\r\n              >\r\n                {charCount}/{maxLength}\r\n              </div>\r\n            </div>\r\n\r\n            <button\r\n              className={cn(\r\n                \"rounded-lg px-3 py-1.5 transition-colors flex items-center gap-1\",\r\n                inputValue.trim()\r\n                  ? \"bg-purple-600 hover:bg-purple-700 text-white\"\r\n                  : \"bg-gray-200 dark:bg-gray-800 text-gray-400 dark:text-gray-600\",\r\n              )}\r\n              type=\"button\"\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim() || isAtLimit}\r\n            >\r\n              <span className=\"text-sm font-medium\">Send</span>\r\n              <SendHorizontal className=\"w-3.5 h-3.5\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"text-xs text-center text-gray-500 dark:text-gray-400\">\r\n          {selectedModel.id === \"gpt-4o\" && (\r\n            <Badge\r\n              variant=\"outline\"\r\n              className=\"text-xs font-normal bg-purple-50 dark:bg-purple-950/30 border-purple-200 dark:border-purple-800 text-purple-700 dark:text-purple-300\"\r\n            >\r\n              Vision enabled\r\n            </Badge>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/eatechUI/ai-input/ai-input-05.tsx",
      "target": "/components/eatechUI/ai-input-05.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}