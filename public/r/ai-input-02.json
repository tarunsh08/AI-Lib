{
  "name": "ai-input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { SendHorizontal, FileUp, Paperclip, X } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useFileInput } from \"@/hooks/use-file-input\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\ninterface FileDisplayProps {\r\n    fileName: string;\r\n    onClear: () => void;\r\n}\r\n\r\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\r\n    <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg group border dark:border-white/10\">\r\n        <FileUp className=\"w-4 h-4 dark:text-white\" />\r\n        <span className=\"text-sm dark:text-white\">{fileName}</span>\r\n        <button\r\n            type=\"button\"\r\n            onClick={onClear}\r\n            className=\"ml-1 p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n        >\r\n            <X className=\"w-3 h-3 dark:text-white\" />\r\n        </button>\r\n    </div>\r\n);\r\n\r\nexport default function AIInput_02() {\r\n    const [inputValue, setInputValue] = useState<string>(\"\");\r\n    const { fileName, fileInputRef, handleFileSelect, clearFile } =\r\n        useFileInput({ accept: \"image/*\", maxSize: 5 });\r\n\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 52,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    return (\r\n        <div className=\"w-full py-2 sm:py-4 px-2 sm:px-0\">\r\n            <div className=\"relative max-w-xl w-full mx-auto flex flex-col gap-2\">\r\n                {fileName && (\r\n                    <FileDisplay fileName={fileName} onClear={clearFile} />\r\n                )}\r\n\r\n                <div className=\"relative\">\r\n                    <div\r\n                        className=\"absolute left-2 sm:left-3 top-1/2 -translate-y-1/2 flex items-center justify-center h-7 sm:h-8 w-7 sm:w-8 rounded-lg bg-black/5 dark:bg-white/5 hover:cursor-pointer\"\r\n                        onClick={() => fileInputRef.current?.click()}\r\n                    >\r\n                        <Paperclip className=\"w-3.5 sm:w-4 h-3.5 sm:h-4 transition-opacity transform scale-x-[-1] rotate-45 dark:text-white\" />\r\n                    </div>\r\n\r\n                    <input\r\n                        type=\"file\"\r\n                        className=\"hidden\"\r\n                        ref={fileInputRef}\r\n                        onChange={handleFileSelect}\r\n                    />\r\n\r\n                    <Textarea\r\n                        id=\"ai-input-02\"\r\n                        placeholder=\"File Upload and Chat!\"\r\n                        className={cn(\r\n                            \"max-w-xl bg-black/5 dark:bg-white/5 w-full rounded-2xl sm:rounded-3xl pl-10 sm:pl-12 pr-12 sm:pr-16\",\r\n                            \"placeholder:text-black/70 dark:placeholder:text-white/70\",\r\n                            \"border-none ring-black/30 dark:ring-white/30\",\r\n                            \"text-black dark:text-white text-wrap py-3 sm:py-4\",\r\n                            \"text-sm sm:text-base\",\r\n                            \"max-h-[200px] overflow-y-auto resize-none leading-[1.2]\",\r\n                            \"min-h-[52px]\",\r\n                            \"max-h-[200px]\"\r\n                        )}\r\n                        ref={textareaRef}\r\n                        value={inputValue}\r\n                        onChange={(e) => {\r\n                            setInputValue(e.target.value);\r\n                            adjustHeight();\r\n                        }}\r\n                        onKeyDown={(e) => {\r\n                            if (e.key === \"Enter\" && !e.shiftKey) {\r\n                                e.preventDefault();\r\n                                setInputValue(\"\");\r\n                                adjustHeight(true);\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    <button\r\n                        className=\"absolute right-2 sm:right-3 top-1/2 -translate-y-1/2 rounded-xl bg-black/5 dark:bg-white/5 py-1 px-1\"\r\n                        type=\"button\"\r\n                    >\r\n                        <SendHorizontal \r\n                            className={cn(\r\n                                \"w-3.5 sm:w-4 h-3.5 sm:h-4 transition-opacity dark:text-white\",\r\n                                inputValue ? \"opacity-100\" : \"opacity-30\"\r\n                            )}\r\n                        />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",
      "path": "/components/eatechUI/ai-input/ai-input-02.tsx",
      "target": "/components/eatechUI/ai-input-02.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useState, useRef } from \"react\";\r\n\r\ninterface UseFileInputOptions {\r\n    accept?: string;\r\n    maxSize?: number;\r\n}\r\n\r\nexport function useFileInput({ accept, maxSize }: UseFileInputOptions) {\r\n    const [fileName, setFileName] = useState<string>(\"\");\r\n    const [error, setError] = useState<string>(\"\");\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const [fileSize, setFileSize] = useState<number>(0);\r\n\r\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = e.target.files?.[0];\r\n        validateAndSetFile(file);\r\n    };\r\n\r\n    const validateAndSetFile = (file: File | undefined) => {\r\n        setError(\"\");\r\n\r\n        if (file) {\r\n            if (maxSize && file.size > maxSize * 1024 * 1024) {\r\n                setError(`File size must be less than ${maxSize}MB`);\r\n                return;\r\n            }\r\n\r\n            if (\r\n                accept &&\r\n                !file.type.match(accept.replace(\"/*\", \"/\"))\r\n            ) {\r\n                setError(`File type must be ${accept}`);\r\n                return;\r\n            }\r\n\r\n            setFileSize(file.size);\r\n            setFileName(file.name);\r\n        }\r\n    };\r\n\r\n    const clearFile = () => {\r\n        setFileName(\"\");\r\n        setError(\"\");\r\n        setFileSize(0);\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    return {\r\n        fileName,\r\n        error,\r\n        fileInputRef,\r\n        handleFileSelect,\r\n        validateAndSetFile,\r\n        clearFile,\r\n        fileSize,\r\n    };\r\n}",
      "path": "/hooks/use-file-input.ts",
      "target": "/hooks/use-file-input.ts"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}