{
  "name": "ai-input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { SendHorizontal, Paperclip, X } from 'lucide-react';\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useFileInput } from \"@/hooks/use-file-input\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\n\r\ninterface FileDisplayProps {\r\n  fileName: string;\r\n  onClear: () => void;\r\n}\r\n\r\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\r\n  <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-2 py-0.5 rounded-md text-xs border dark:border-white/10\">\r\n    <span className=\"dark:text-white truncate max-w-[150px]\">{fileName}</span>\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClear}\r\n      className=\"p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n    >\r\n      <X className=\"w-3 h-3 dark:text-white\" />\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default function AIInputMinimal() {\r\n  const [inputValue, setInputValue] = useState<string>(\"\");\r\n  const { fileName, fileInputRef, handleFileSelect, clearFile } =\r\n    useFileInput({ accept: \"image/*\", maxSize: 5 });\r\n\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 40,\r\n    maxHeight: 160,\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitting:\", inputValue, fileName ? \"with file\" : \"\");\r\n      setInputValue(\"\");\r\n      adjustHeight(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full py-2 px-2\">\r\n      <div className=\"relative max-w-xl w-full mx-auto flex flex-col gap-1\">\r\n        {fileName && <FileDisplay fileName={fileName} onClear={clearFile} />}\r\n\r\n        <div className=\"relative flex items-center bg-black/5 dark:bg-white/5 rounded-lg border-none\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"flex items-center justify-center h-8 w-8 ml-1\"\r\n            onClick={() => fileInputRef.current?.click()}\r\n          >\r\n            <Paperclip className=\"w-4 h-4 text-black/50 dark:text-white/50 hover:text-black/80 dark:hover:text-white/80 transition-colors\" />\r\n          </button>\r\n\r\n          <input\r\n            type=\"file\"\r\n            className=\"hidden\"\r\n            ref={fileInputRef}\r\n            onChange={handleFileSelect}\r\n          />\r\n\r\n          <Textarea\r\n            placeholder=\"Message...\"\r\n            className={cn(\r\n              \"bg-transparent w-full border-none focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"placeholder:text-black/50 dark:placeholder:text-white/50\",\r\n              \"text-black dark:text-white py-2 px-1\",\r\n              \"text-sm\",\r\n              \"max-h-[160px] overflow-y-auto resize-none\",\r\n              \"min-h-[40px]\"\r\n            )}\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value);\r\n              adjustHeight();\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault();\r\n                handleSubmit();\r\n              }\r\n            }}\r\n          />\r\n\r\n          <button\r\n            className={cn(\r\n              \"flex items-center justify-center h-8 w-8 mr-1 rounded-full transition-colors\",\r\n              inputValue.trim() ? \"text-black dark:text-white\" : \"text-black/30 dark:text-white/30\"\r\n            )}\r\n            type=\"button\"\r\n            onClick={handleSubmit}\r\n            disabled={!inputValue.trim()}\r\n          >\r\n            <SendHorizontal className=\"w-4 h-4\" />\r\n            <span className=\"sr-only\">Send message</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "path": "/components/eatechUI/ai-input/ai-input-03.tsx",
      "target": "/components/eatechUI/ai-input-03.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}