{
  "name": "action-search-bar",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport type React from \"react\"\r\n\r\nimport { useState, useEffect, useRef, type KeyboardEvent } from \"react\"\r\nimport { AnimatePresence, motion } from \"framer-motion\"\r\nimport {\r\n  Search,\r\n  Send,\r\n  BarChart2,\r\n  Video,\r\n  PlaneTakeoff,\r\n  AudioLines,\r\n  LayoutGrid,\r\n  Command,\r\n  Settings,\r\n  FileText,\r\n  Calendar,\r\n  Mail,\r\n  MessageSquare,\r\n  Globe,\r\n  Zap,\r\n  Sparkles,\r\n  Palette,\r\n  Bookmark,\r\n} from \"lucide-react\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\ninterface Action {\r\n  id: string\r\n  label: string\r\n  icon: React.ReactNode\r\n  description?: string\r\n  shortcut?: string\r\n  category?: string\r\n  tags?: string[]\r\n  color?: string\r\n  isNew?: boolean\r\n  isPinned?: boolean\r\n  execute?: () => void\r\n}\r\n\r\ninterface ActionCategory {\r\n  name: string\r\n  actions: Action[]\r\n}\r\n\r\ninterface SearchResult {\r\n  categories: ActionCategory[]\r\n  recentActions: Action[]\r\n  suggestedActions: Action[]\r\n}\r\n\r\n// Sample action data with more variety and categories\r\nconst allActions: Action[] = [\r\n  {\r\n    id: \"1\",\r\n    label: \"Book tickets\",\r\n    icon: <PlaneTakeoff className=\"h-4 w-4\" style={{ color: \"#3b82f6\" }} />,\r\n    description: \"Find and book travel tickets\",\r\n    shortcut: \"⌘B\",\r\n    category: \"Travel\",\r\n    tags: [\"booking\", \"travel\", \"tickets\"],\r\n    color: \"#3b82f6\",\r\n  },\r\n  {\r\n    id: \"2\",\r\n    label: \"Summarize document\",\r\n    icon: <BarChart2 className=\"h-4 w-4\" style={{ color: \"#f97316\" }} />,\r\n    description: \"AI-powered document summary\",\r\n    shortcut: \"⌘S\",\r\n    category: \"AI Tools\",\r\n    tags: [\"ai\", \"summary\", \"document\"],\r\n    color: \"#f97316\",\r\n    isNew: true,\r\n  },\r\n  {\r\n    id: \"3\",\r\n    label: \"Screen Studio\",\r\n    icon: <Video className=\"h-4 w-4\" style={{ color: \"#8b5cf6\" }} />,\r\n    description: \"Record and edit screen captures\",\r\n    shortcut: \"⌘R\",\r\n    category: \"Media\",\r\n    tags: [\"video\", \"recording\", \"screen\"],\r\n    color: \"#8b5cf6\",\r\n  },\r\n  {\r\n    id: \"4\",\r\n    label: \"Talk to Assistant\",\r\n    icon: <AudioLines className=\"h-4 w-4\" style={{ color: \"#10b981\" }} />,\r\n    description: \"Voice-enabled AI assistant\",\r\n    shortcut: \"⌘T\",\r\n    category: \"AI Tools\",\r\n    tags: [\"voice\", \"ai\", \"assistant\"],\r\n    color: \"#10b981\",\r\n    isPinned: true,\r\n  },\r\n  {\r\n    id: \"5\",\r\n    label: \"Component Library\",\r\n    icon: <LayoutGrid className=\"h-4 w-4\" style={{ color: \"#0ea5e9\" }} />,\r\n    description: \"Browse UI component collection\",\r\n    shortcut: \"⌘L\",\r\n    category: \"Design\",\r\n    tags: [\"ui\", \"components\", \"design\"],\r\n    color: \"#0ea5e9\",\r\n  },\r\n  {\r\n    id: \"6\",\r\n    label: \"System Settings\",\r\n    icon: <Settings className=\"h-4 w-4\" style={{ color: \"#6b7280\" }} />,\r\n    description: \"Configure system preferences\",\r\n    shortcut: \"⌘,\",\r\n    category: \"System\",\r\n    tags: [\"settings\", \"preferences\", \"config\"],\r\n    color: \"#6b7280\",\r\n  },\r\n  {\r\n    id: \"7\",\r\n    label: \"Create Document\",\r\n    icon: <FileText className=\"h-4 w-4\" style={{ color: \"#ec4899\" }} />,\r\n    description: \"Create a new document\",\r\n    shortcut: \"⌘N\",\r\n    category: \"Productivity\",\r\n    tags: [\"document\", \"create\", \"new\"],\r\n    color: \"#ec4899\",\r\n  },\r\n  {\r\n    id: \"8\",\r\n    label: \"Schedule Meeting\",\r\n    icon: <Calendar className=\"h-4 w-4\" style={{ color: \"#14b8a6\" }} />,\r\n    description: \"Add event to calendar\",\r\n    shortcut: \"⌘M\",\r\n    category: \"Productivity\",\r\n    tags: [\"calendar\", \"meeting\", \"schedule\"],\r\n    color: \"#14b8a6\",\r\n    isNew: true,\r\n  },\r\n  {\r\n    id: \"9\",\r\n    label: \"Compose Email\",\r\n    icon: <Mail className=\"h-4 w-4\" style={{ color: \"#6366f1\" }} />,\r\n    description: \"Write a new email\",\r\n    shortcut: \"⌘E\",\r\n    category: \"Communication\",\r\n    tags: [\"email\", \"compose\", \"write\"],\r\n    color: \"#6366f1\",\r\n  },\r\n  {\r\n    id: \"10\",\r\n    label: \"Start Chat\",\r\n    icon: <MessageSquare className=\"h-4 w-4\" style={{ color: \"#f43f5e\" }} />,\r\n    description: \"Begin a new conversation\",\r\n    shortcut: \"⌘C\",\r\n    category: \"Communication\",\r\n    tags: [\"chat\", \"message\", \"conversation\"],\r\n    color: \"#f43f5e\",\r\n  },\r\n  {\r\n    id: \"11\",\r\n    label: \"Browse Internet\",\r\n    icon: <Globe className=\"h-4 w-4\" style={{ color: \"#0284c7\" }} />,\r\n    description: \"Open web browser\",\r\n    shortcut: \"⌘I\",\r\n    category: \"Web\",\r\n    tags: [\"browser\", \"internet\", \"web\"],\r\n    color: \"#0284c7\",\r\n  },\r\n  {\r\n    id: \"12\",\r\n    label: \"Quick Actions\",\r\n    icon: <Zap className=\"h-4 w-4\" style={{ color: \"#eab308\" }} />,\r\n    description: \"Access frequently used tools\",\r\n    shortcut: \"⌘Q\",\r\n    category: \"System\",\r\n    tags: [\"quick\", \"actions\", \"tools\"],\r\n    color: \"#eab308\",\r\n    isPinned: true,\r\n  },\r\n  {\r\n    id: \"13\",\r\n    label: \"Generate Image\",\r\n    icon: <Sparkles className=\"h-4 w-4\" style={{ color: \"#a855f7\" }} />,\r\n    description: \"AI image generation\",\r\n    shortcut: \"⌘G\",\r\n    category: \"AI Tools\",\r\n    tags: [\"ai\", \"image\", \"generate\"],\r\n    color: \"#a855f7\",\r\n    isNew: true,\r\n  },\r\n  {\r\n    id: \"14\",\r\n    label: \"Theme Settings\",\r\n    icon: <Palette className=\"h-4 w-4\" style={{ color: \"#f59e0b\" }} />,\r\n    description: \"Customize appearance\",\r\n    shortcut: \"⌘P\",\r\n    category: \"Design\",\r\n    tags: [\"theme\", \"appearance\", \"customize\"],\r\n    color: \"#f59e0b\",\r\n  },\r\n  {\r\n    id: \"15\",\r\n    label: \"Saved Items\",\r\n    icon: <Bookmark className=\"h-4 w-4\" style={{ color: \"#0d9488\" }} />,\r\n    description: \"View bookmarked content\",\r\n    shortcut: \"⌘D\",\r\n    category: \"Productivity\",\r\n    tags: [\"saved\", \"bookmarks\", \"favorites\"],\r\n    color: \"#0d9488\",\r\n  },\r\n]\r\n\r\n// Group actions by category\r\nconst groupActionsByCategory = (actions: Action[]): ActionCategory[] => {\r\n  const categories: Record<string, Action[]> = {}\r\n\r\n  actions.forEach((action) => {\r\n    const category = action.category || \"Uncategorized\"\r\n    if (!categories[category]) {\r\n      categories[category] = []\r\n    }\r\n    categories[category].push(action)\r\n  })\r\n\r\n  return Object.entries(categories).map(([name, actions]) => ({\r\n    name,\r\n    actions,\r\n  }))\r\n}\r\n\r\nexport default function ActionSearchBar({\r\n  defaultOpen = false,\r\n  className,\r\n}: {\r\n  defaultOpen?: boolean\r\n  className?: string\r\n}) {\r\n  const [query, setQuery] = useState(\"\")\r\n  const [isFocused, setIsFocused] = useState(defaultOpen)\r\n  const [selectedIndex, setSelectedIndex] = useState(0)\r\n  const [activeCategory, setActiveCategory] = useState<string | null>(null)\r\n  const [recentActions] = useState<Action[]>(allActions.filter((a) => a.isPinned).slice(0, 3))\r\n  const inputRef = useRef<HTMLInputElement>(null)\r\n  const resultsRef = useRef<HTMLDivElement>(null)\r\n\r\n  // Process and filter actions based on query\r\n  const getSearchResults = (): SearchResult => {\r\n    if (!query.trim()) {\r\n      // Show categories, recent and suggested when no query\r\n      return {\r\n        categories: groupActionsByCategory(allActions),\r\n        recentActions: recentActions,\r\n        suggestedActions: allActions.filter((a) => a.isNew).slice(0, 3),\r\n      }\r\n    }\r\n\r\n    const normalizedQuery = query.toLowerCase().trim()\r\n    const filteredActions = allActions.filter((action) => {\r\n      const searchableText = [\r\n        action.label.toLowerCase(),\r\n        action.description?.toLowerCase() || \"\",\r\n        ...(action.tags || []).map((tag) => tag.toLowerCase()),\r\n      ].join(\" \")\r\n\r\n      return searchableText.includes(normalizedQuery)\r\n    })\r\n\r\n    // If filtering by category, only show that category\r\n    if (activeCategory) {\r\n      const categoryActions = filteredActions.filter((a) => a.category === activeCategory)\r\n      return {\r\n        categories: [\r\n          {\r\n            name: activeCategory,\r\n            actions: categoryActions,\r\n          },\r\n        ],\r\n        recentActions: [],\r\n        suggestedActions: [],\r\n      }\r\n    }\r\n\r\n    return {\r\n      categories: groupActionsByCategory(filteredActions),\r\n      recentActions: [],\r\n      suggestedActions: [],\r\n    }\r\n  }\r\n\r\n  const searchResults = getSearchResults()\r\n\r\n  // Calculate total number of visible actions for keyboard navigation\r\n  const getAllVisibleActions = (): Action[] => {\r\n    const allVisible: Action[] = []\r\n\r\n    if (searchResults.recentActions.length > 0) {\r\n      allVisible.push(...searchResults.recentActions)\r\n    }\r\n\r\n    if (searchResults.suggestedActions.length > 0) {\r\n      allVisible.push(...searchResults.suggestedActions)\r\n    }\r\n\r\n    searchResults.categories.forEach((category) => {\r\n      allVisible.push(...category.actions)\r\n    })\r\n\r\n    return allVisible\r\n  }\r\n\r\n  const visibleActions = getAllVisibleActions()\r\n\r\n  // Reset selected index when results change\r\n  useEffect(() => {\r\n    setSelectedIndex(0)\r\n  }, [query, activeCategory])\r\n\r\n  // Handle keyboard navigation\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    switch (e.key) {\r\n      case \"ArrowDown\":\r\n        e.preventDefault()\r\n        setSelectedIndex((prev) => (prev + 1) % visibleActions.length)\r\n        break\r\n      case \"ArrowUp\":\r\n        e.preventDefault()\r\n        setSelectedIndex((prev) => (prev - 1 + visibleActions.length) % visibleActions.length)\r\n        break\r\n      case \"Enter\":\r\n        e.preventDefault()\r\n        if (visibleActions[selectedIndex]) {\r\n          executeAction(visibleActions[selectedIndex])\r\n        }\r\n        break\r\n      case \"Escape\":\r\n        e.preventDefault()\r\n        setIsFocused(false)\r\n        inputRef.current?.blur()\r\n        break\r\n    }\r\n  }\r\n\r\n  // Scroll selected item into view\r\n  useEffect(() => {\r\n    if (resultsRef.current) {\r\n      const selectedElement = resultsRef.current.querySelector(`[data-index=\"${selectedIndex}\"]`)\r\n      if (selectedElement) {\r\n        selectedElement.scrollIntoView({ block: \"nearest\", behavior: \"smooth\" })\r\n      }\r\n    }\r\n  }, [selectedIndex])\r\n\r\n  // Global keyboard shortcut to focus search\r\n  useEffect(() => {\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      if ((e.metaKey || e.ctrlKey) && e.key === \"k\") {\r\n        e.preventDefault()\r\n        inputRef.current?.focus()\r\n        setIsFocused(true)\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown as any)\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown as any)\r\n  }, [])\r\n\r\n  const executeAction = (action: Action) => {\r\n    console.log(`Executing action: ${action.label}`)\r\n    if (action.execute) {\r\n      action.execute()\r\n    }\r\n    setIsFocused(false)\r\n    setQuery(\"\")\r\n    inputRef.current?.blur()\r\n  }\r\n\r\n  const handleCategoryClick = (category: string) => {\r\n    setActiveCategory((prev) => (prev === category ? null : category))\r\n  }\r\n\r\n  // Animation variants\r\n  const containerVariants = {\r\n    hidden: { opacity: 0, y: -10, height: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      height: \"auto\",\r\n      transition: {\r\n        duration: 0.2,\r\n        staggerChildren: 0.03,\r\n      },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: -10,\r\n      height: 0,\r\n      transition: {\r\n        duration: 0.15,\r\n      },\r\n    },\r\n  }\r\n\r\n  const itemVariants = {\r\n    hidden: { opacity: 0, y: 10 },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: {\r\n        duration: 0.2,\r\n      },\r\n    },\r\n    exit: {\r\n      opacity: 0,\r\n      y: -5,\r\n      transition: {\r\n        duration: 0.1,\r\n      },\r\n    },\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"w-full max-w-2xl mx-auto\", className)}>\r\n      <div className=\"relative flex flex-col justify-start items-center\">\r\n        <div className=\"w-full sticky top-0 bg-background z-10 pt-4 pb-1\">\r\n          <div className=\"flex items-center justify-between mb-2\">\r\n            <label className=\"text-xs font-medium text-muted-foreground\" htmlFor=\"action-search\">\r\n              Search Commands\r\n            </label>\r\n            <div className=\"flex items-center gap-1\">\r\n              <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                ⌘K\r\n              </kbd>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"relative\">\r\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\r\n              <Command className=\"h-4 w-4\" />\r\n            </div>\r\n\r\n            <Input\r\n              ref={inputRef}\r\n              id=\"action-search\"\r\n              type=\"text\"\r\n              placeholder=\"Type a command or search...\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              onFocus={() => setIsFocused(true)}\r\n              onBlur={() => setTimeout(() => setIsFocused(false), 200)}\r\n              onKeyDown={handleKeyDown}\r\n              className=\"pl-9 pr-9 py-2 h-10 text-sm rounded-lg focus-visible:ring-offset-0 bg-background border-border\"\r\n            />\r\n\r\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4\">\r\n              <AnimatePresence mode=\"wait\">\r\n                {query.length > 0 ? (\r\n                  <motion.div\r\n                    key=\"send\"\r\n                    initial={{ scale: 0.8, opacity: 0 }}\r\n                    animate={{ scale: 1, opacity: 1 }}\r\n                    exit={{ scale: 0.8, opacity: 0 }}\r\n                    transition={{ duration: 0.15 }}\r\n                  >\r\n                    <Send className=\"w-4 h-4 text-muted-foreground\" />\r\n                  </motion.div>\r\n                ) : (\r\n                  <motion.div\r\n                    key=\"search\"\r\n                    initial={{ scale: 0.8, opacity: 0 }}\r\n                    animate={{ scale: 1, opacity: 1 }}\r\n                    exit={{ scale: 0.8, opacity: 0 }}\r\n                    transition={{ duration: 0.15 }}\r\n                  >\r\n                    <Search className=\"w-4 h-4 text-muted-foreground\" />\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"w-full\" ref={resultsRef}>\r\n          <AnimatePresence>\r\n            {isFocused && (\r\n              <motion.div\r\n                className=\"w-full border rounded-lg shadow-lg overflow-hidden bg-popover mt-1 max-h-[70vh] overflow-y-auto\"\r\n                variants={containerVariants}\r\n                initial=\"hidden\"\r\n                animate=\"visible\"\r\n                exit=\"exit\"\r\n              >\r\n                {/* Category filters */}\r\n                {searchResults.categories.length > 1 && (\r\n                  <motion.div className=\"p-2 border-b flex gap-1 flex-wrap\" variants={itemVariants}>\r\n                    {searchResults.categories.map((category) => (\r\n                      <Badge\r\n                        key={category.name}\r\n                        variant={activeCategory === category.name ? \"default\" : \"outline\"}\r\n                        className=\"cursor-pointer hover:bg-accent transition-colors\"\r\n                        onClick={() => handleCategoryClick(category.name)}\r\n                      >\r\n                        {category.name}\r\n                      </Badge>\r\n                    ))}\r\n                  </motion.div>\r\n                )}\r\n\r\n                {/* Recent actions */}\r\n                {searchResults.recentActions.length > 0 && (\r\n                  <motion.div variants={itemVariants}>\r\n                    <div className=\"px-3 pt-2 pb-1\">\r\n                      <h3 className=\"text-xs font-medium text-muted-foreground\">Recent</h3>\r\n                    </div>\r\n                    <ul>\r\n                      {searchResults.recentActions.map((action, idx) => (\r\n                        <motion.li\r\n                          key={action.id}\r\n                          data-index={idx}\r\n                          className={cn(\r\n                            \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\r\n                            selectedIndex === idx ? \"bg-accent text-accent-foreground\" : \"\",\r\n                          )}\r\n                          variants={itemVariants}\r\n                          onClick={() => executeAction(action)}\r\n                        >\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <div\r\n                              className=\"flex items-center justify-center w-6 h-6 rounded-md\"\r\n                              style={{ backgroundColor: `${action.color}20` }}\r\n                            >\r\n                              {action.icon}\r\n                            </div>\r\n                            <div>\r\n                              <div className=\"text-sm font-medium\">{action.label}</div>\r\n                              <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            {action.shortcut && (\r\n                              <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                                {action.shortcut}\r\n                              </kbd>\r\n                            )}\r\n                          </div>\r\n                        </motion.li>\r\n                      ))}\r\n                    </ul>\r\n                  </motion.div>\r\n                )}\r\n\r\n                {/* Suggested actions */}\r\n                {searchResults.suggestedActions.length > 0 && (\r\n                  <motion.div variants={itemVariants}>\r\n                    <div className=\"px-3 pt-2 pb-1\">\r\n                      <h3 className=\"text-xs font-medium text-muted-foreground\">Suggested</h3>\r\n                    </div>\r\n                    <ul>\r\n                      {searchResults.suggestedActions.map((action, idx) => {\r\n                        const actionIndex = searchResults.recentActions.length + idx\r\n                        return (\r\n                          <motion.li\r\n                            key={action.id}\r\n                            data-index={actionIndex}\r\n                            className={cn(\r\n                              \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\r\n                              selectedIndex === actionIndex ? \"bg-accent text-accent-foreground\" : \"\",\r\n                            )}\r\n                            variants={itemVariants}\r\n                            onClick={() => executeAction(action)}\r\n                          >\r\n                            <div className=\"flex items-center gap-3\">\r\n                              <div\r\n                                className=\"flex items-center justify-center w-6 h-6 rounded-md\"\r\n                                style={{ backgroundColor: `${action.color}20` }}\r\n                              >\r\n                                {action.icon}\r\n                              </div>\r\n                              <div>\r\n                                <div className=\"flex items-center gap-2\">\r\n                                  <span className=\"text-sm font-medium\">{action.label}</span>\r\n                                  {action.isNew && (\r\n                                    <Badge\r\n                                      variant=\"default\"\r\n                                      className=\"text-[10px] px-1 py-0 h-4 bg-emerald-500 hover:bg-emerald-500\"\r\n                                    >\r\n                                      New\r\n                                    </Badge>\r\n                                  )}\r\n                                </div>\r\n                                <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              {action.shortcut && (\r\n                                <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                                  {action.shortcut}\r\n                                </kbd>\r\n                              )}\r\n                            </div>\r\n                          </motion.li>\r\n                        )\r\n                      })}\r\n                    </ul>\r\n                  </motion.div>\r\n                )}\r\n\r\n                {/* Categorized actions */}\r\n                {searchResults.categories.map((category, categoryIndex) => {\r\n                  const startingIndex = searchResults.recentActions.length + searchResults.suggestedActions.length\r\n\r\n                  return (\r\n                    <motion.div key={category.name} variants={itemVariants}>\r\n                      <div className=\"px-3 pt-2 pb-1\">\r\n                        <h3 className=\"text-xs font-medium text-muted-foreground\">{category.name}</h3>\r\n                      </div>\r\n                      <ul>\r\n                        {category.actions.map((action, idx) => {\r\n                          // Calculate the absolute index for this action\r\n                          let actionIndex = startingIndex\r\n                          for (let i = 0; i < categoryIndex; i++) {\r\n                            actionIndex += searchResults.categories[i].actions.length\r\n                          }\r\n                          actionIndex += idx\r\n\r\n                          return (\r\n                            <motion.li\r\n                              key={action.id}\r\n                              data-index={actionIndex}\r\n                              className={cn(\r\n                                \"px-3 py-2 mx-1 my-0.5 flex items-center justify-between hover:bg-accent hover:text-accent-foreground cursor-pointer rounded-md transition-colors\",\r\n                                selectedIndex === actionIndex ? \"bg-accent text-accent-foreground\" : \"\",\r\n                              )}\r\n                              variants={itemVariants}\r\n                              onClick={() => executeAction(action)}\r\n                            >\r\n                              <div className=\"flex items-center gap-3\">\r\n                                <div\r\n                                  className=\"flex items-center justify-center w-6 h-6 rounded-md\"\r\n                                  style={{ backgroundColor: `${action.color}20` }}\r\n                                >\r\n                                  {action.icon}\r\n                                </div>\r\n                                <div>\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                    <span className=\"text-sm font-medium\">{action.label}</span>\r\n                                    {action.isNew && (\r\n                                      <Badge\r\n                                        variant=\"default\"\r\n                                        className=\"text-[10px] px-1 py-0 h-4 bg-emerald-500 hover:bg-emerald-500\"\r\n                                      >\r\n                                        New\r\n                                      </Badge>\r\n                                    )}\r\n                                  </div>\r\n                                  <div className=\"text-xs text-muted-foreground\">{action.description}</div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                {action.shortcut && (\r\n                                  <kbd className=\"px-1.5 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                                    {action.shortcut}\r\n                                  </kbd>\r\n                                )}\r\n                              </div>\r\n                            </motion.li>\r\n                          )\r\n                        })}\r\n                      </ul>\r\n                    </motion.div>\r\n                  )\r\n                })}\r\n\r\n                {/* Footer with keyboard shortcuts */}\r\n                <motion.div\r\n                  className=\"mt-1 px-3 py-2 border-t flex items-center justify-between text-xs text-muted-foreground\"\r\n                  variants={itemVariants}\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                        ↑\r\n                      </kbd>\r\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                        ↓\r\n                      </kbd>\r\n                      <span>to navigate</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                        enter\r\n                      </kbd>\r\n                      <span>to select</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <kbd className=\"px-1 py-0.5 text-[10px] font-mono font-medium text-muted-foreground bg-muted rounded border border-border\">\r\n                      esc\r\n                    </kbd>\r\n                    <span>to close</span>\r\n                  </div>\r\n                </motion.div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}",
      "path": "/components/eatechUI/action-search-bar.tsx",
      "target": "/components/eatechUI/action-search-bar.tsx"
    },
    {
      "type": "registry:hook",
      "content": "import { useEffect, useState } from \"react\";\r\n\r\nfunction useDebounce<T>(value: T, delay: number = 500): T {\r\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        return () => {\r\n            clearTimeout(timer);\r\n        };\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue;\r\n}\r\n\r\nexport default useDebounce;",
      "path": "/hooks/use-debounce.ts",
      "target": "/hooks/use-debounce.ts"
    }
  ]
}