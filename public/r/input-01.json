{
  "name": "input-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef } from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Check, Copy } from \"lucide-react\";\r\nimport { useCopyToClipboard } from \"@/hooks/use-copy-to-clipboard\";\r\n\r\ninterface ColorInputProps {\r\n  onChange?: (color: string) => void; // Callback for final color\r\n  defaultValue?: string; // Default color\r\n  swatches?: string[]; // Swatches for quick selection\r\n  showOpacity?: boolean; // Whether to show the opacity slider\r\n  label?: string; // Label for the input\r\n}\r\n\r\nconst defaultSwatches = [\r\n  \"#ef4444\",\r\n  \"#f97316\",\r\n  \"#f59e0b\",\r\n  \"#84cc16\",\r\n  \"#22c55e\",\r\n  \"#06b6d4\",\r\n  \"#3b82f6\",\r\n  \"#6366f1\",\r\n  \"#8b5cf6\",\r\n  \"#d946ef\",\r\n  \"#ec4899\",\r\n  \"#f43f5e\",\r\n];\r\n\r\n// Helper to calculate final color with opacity\r\nconst generateFinalColor = (color: string, opacity: number): string => {\r\n  if (opacity === 100) return color; // No need to calculate if opacity is 100%\r\n  const alpha = Math.round(opacity * 2.55) // Convert opacity (0-100) to 0-255\r\n    .toString(16) // Convert to hexadecimal\r\n    .padStart(2, \"0\"); // Ensure 2 digits (e.g., \"0F\")\r\n  return `${color}${alpha}`;\r\n};\r\n\r\nexport default function Input_01({\r\n  onChange,\r\n  defaultValue = \"#3b82f6\",\r\n  swatches = defaultSwatches,\r\n  showOpacity = true,\r\n  label = \"Color\",\r\n}: ColorInputProps) {\r\n  const [color, setColor] = useState(defaultValue); // Base color without opacity\r\n  const [opacity, setOpacity] = useState(100); // Opacity (0-100)\r\n  const { isCopied, copyToClipboard } = useCopyToClipboard();\r\n\r\n  const finalColor = generateFinalColor(color, opacity); // Calculate the final color\r\n\r\n  // Trigger the onChange callback whenever color or opacity changes\r\n  const updateFinalColor = (newColor: string, newOpacity = opacity) => {\r\n    const updatedColor = generateFinalColor(newColor, newOpacity);\r\n    setColor(newColor);\r\n    onChange?.(updatedColor); // Pass final color to parent\r\n  };\r\n\r\n  const updateOpacity = (newOpacity: number) => {\r\n    setOpacity(newOpacity);\r\n    onChange?.(generateFinalColor(color, newOpacity)); // Pass final color to parent\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    copyToClipboard(finalColor); // Copy the final color\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full max-w-xs space-y-2 relative z-10 min-h-[200px]\">\r\n      {label && (\r\n        <label\r\n          htmlFor=\"color-input\"\r\n          className=\"text-sm font-medium text-zinc-700 dark:text-zinc-300\"\r\n        >\r\n          {label}\r\n        </label>\r\n      )}\r\n\r\n      {/* Color Picker */}\r\n      <div className=\"p-3 bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg\">\r\n        {/* Color Preview & Input */}\r\n        <div className=\"flex gap-2 items-center\">\r\n          <div\r\n            className=\"w-8 h-8 rounded-md border border-zinc-200 dark:border-zinc-700\"\r\n            style={{ backgroundColor: finalColor }} // Display final color\r\n          />\r\n          <input\r\n            id=\"color-input\"\r\n            type=\"text\"\r\n            value={finalColor.toUpperCase()} // Show final color\r\n            onChange={(e) => {\r\n              const value = e.target.value.slice(0, 7); // Extract base color\r\n              if (/^#[0-9A-F]{6}$/i.test(value)) {\r\n                updateFinalColor(value);\r\n              }\r\n            }}\r\n            className={cn(\r\n              \"flex-1 px-2 py-1 rounded-md border border-zinc-200 dark:border-zinc-800\",\r\n              \"bg-white dark:bg-zinc-900 text-sm font-mono\",\r\n              \"focus:outline-hidden focus:ring-2 focus:ring-indigo-500/20\"\r\n            )}\r\n          />\r\n          <button type=\"button\" onClick={handleCopy} className=\"ml-2 hover:opacity-70\">\r\n            {isCopied ? (\r\n              <Check className=\"w-4 h-4 text-green-500\" />\r\n            ) : (\r\n              <Copy className=\"w-4 h-4 text-zinc-500\" />\r\n            )}\r\n          </button>\r\n        </div>\r\n\r\n        {/* Opacity Slider */}\r\n        {showOpacity && (\r\n          <div className=\"mt-4 space-y-1.5\">\r\n            <div className=\"flex justify-between text-xs\">\r\n              <span>Opacity</span>\r\n              <span>{opacity}%</span>\r\n            </div>\r\n            <input\r\n              type=\"range\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={opacity}\r\n              onChange={(e) => updateOpacity(Number(e.target.value))}\r\n              className={cn(\r\n                \"w-full h-2 rounded-full appearance-none\",\r\n                \"bg-linear-to-r from-transparent to-current cursor-pointer\"\r\n              )}\r\n              style={{ color }}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Color Swatches */}\r\n        <div className=\"mt-4 space-y-1.5\">\r\n          <div className=\"text-xs font-medium text-zinc-600 dark:text-zinc-400\">Swatches</div>\r\n          <div className=\"grid grid-cols-6 gap-1\">\r\n            {swatches.map((swatch) => (\r\n              <button\r\n                type=\"button\"\r\n                key={swatch}\r\n                onClick={() => updateFinalColor(swatch)}\r\n                className={cn(\r\n                  \"w-6 h-6 rounded-md border border-zinc-200 dark:border-zinc-700\",\r\n                  \"transition-transform hover:scale-110 relative\"\r\n                )}\r\n                style={{ backgroundColor: swatch }}\r\n              >\r\n                {color === swatch && (\r\n                  <Check\r\n                    className={cn(\r\n                      \"w-4 h-4 absolute inset-0 m-auto text-white\",\r\n                      \"drop-shadow-[0_1px_1px_rgba(0,0,0,0.5)]\"\r\n                    )}\r\n                  />\r\n                )}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "path": "/components/eatechUI/input/input-01.tsx",
      "target": "/components/eatechUI/input-01.tsx"
    }
  ]
}