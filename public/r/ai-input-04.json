{
  "name": "ai-input-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "textarea"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\r\n\r\nimport { SendHorizontal, Paperclip, X, Smile, Mic, MicOff } from \"lucide-react\"\r\nimport { useState } from \"react\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useFileInput } from \"@/hooks/use-file-input\"\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\r\n\r\ninterface FileDisplayProps {\r\n  fileName: string\r\n  onClear: () => void\r\n}\r\n\r\nconst FileDisplay = ({ fileName, onClear }: FileDisplayProps) => (\r\n  <div className=\"flex items-center gap-2 bg-black/5 dark:bg-white/5 w-fit px-3 py-1 rounded-lg border dark:border-white/10\">\r\n    <span className=\"text-sm dark:text-white truncate max-w-[200px]\">{fileName}</span>\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClear}\r\n      className=\"p-0.5 rounded-full hover:bg-black/10 dark:hover:bg-white/10 transition-colors\"\r\n    >\r\n      <X className=\"w-3 h-3 dark:text-white\" />\r\n    </button>\r\n  </div>\r\n)\r\n\r\n// Sample emoji data\r\nconst emojis = [\"😀\", \"😂\", \"🙂\", \"😍\", \"🤔\", \"👍\", \"🎉\", \"🔥\", \"💯\", \"⭐\", \"❤️\", \"👋\", \"🤖\", \"💡\", \"✨\"]\r\n\r\nexport default function AIInputEmoji() {\r\n  const [inputValue, setInputValue] = useState<string>(\"\")\r\n  const [isRecording, setIsRecording] = useState<boolean>(false)\r\n  const { fileName, fileInputRef, handleFileSelect, clearFile } = useFileInput({\r\n    accept: \"image/*,video/*\",\r\n    maxSize: 10,\r\n  })\r\n\r\n  const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n    minHeight: 52,\r\n    maxHeight: 200,\r\n  })\r\n\r\n  const handleSubmit = () => {\r\n    if (inputValue.trim()) {\r\n      console.log(\"Submitting:\", inputValue, fileName ? \"with file\" : \"\")\r\n      setInputValue(\"\")\r\n      adjustHeight(true)\r\n    }\r\n  }\r\n\r\n  const insertEmoji = (emoji: string) => {\r\n    setInputValue((prev) => prev + emoji)\r\n    setTimeout(() => adjustHeight(), 0)\r\n  }\r\n\r\n  const toggleRecording = () => {\r\n    setIsRecording(!isRecording)\r\n    // In a real implementation, this would start/stop voice recording\r\n    if (!isRecording) {\r\n      console.log(\"Starting voice recording...\")\r\n    } else {\r\n      console.log(\"Stopping voice recording...\")\r\n      // Simulate adding transcribed text\r\n      setInputValue((prev) => prev + \" [Voice transcription would appear here]\")\r\n      setTimeout(() => adjustHeight(), 0)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full py-3 px-2\">\r\n      <div className=\"relative max-w-xl w-full mx-auto flex flex-col gap-2\">\r\n        {fileName && <FileDisplay fileName={fileName} onClear={clearFile} />}\r\n\r\n        <div className=\"relative bg-white dark:bg-gray-800 rounded-2xl shadow-md border border-gray-200 dark:border-gray-700\">\r\n          <div className=\"flex items-center px-3 pt-2\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"p-1.5 rounded-full hover:bg-black/5 dark:hover:bg-white/10 transition-colors\"\r\n              onClick={() => fileInputRef.current?.click()}\r\n            >\r\n              <Paperclip className=\"w-5 h-5 text-gray-500 dark:text-gray-400\" />\r\n              <span className=\"sr-only\">Attach file</span>\r\n            </button>\r\n\r\n            <Popover>\r\n              <PopoverTrigger asChild>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"p-1.5 rounded-full hover:bg-black/5 dark:hover:bg-white/10 transition-colors\"\r\n                >\r\n                  <Smile className=\"w-5 h-5 text-gray-500 dark:text-gray-400\" />\r\n                  <span className=\"sr-only\">Insert emoji</span>\r\n                </button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-64 p-2\" align=\"start\" side=\"top\">\r\n                <div className=\"grid grid-cols-5 gap-2\">\r\n                  {emojis.map((emoji, index) => (\r\n                    <button\r\n                      key={index}\r\n                      className=\"text-xl p-2 hover:bg-black/5 dark:hover:bg-white/10 rounded-lg transition-colors\"\r\n                      onClick={() => insertEmoji(emoji)}\r\n                    >\r\n                      {emoji}\r\n                    </button>\r\n                  ))}\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className={cn(\r\n                \"p-1.5 rounded-full transition-colors\",\r\n                isRecording\r\n                  ? \"bg-red-100 dark:bg-red-900/30 text-red-500\"\r\n                  : \"hover:bg-black/5 dark:hover:bg-white/10 text-gray-500 dark:text-gray-400\",\r\n              )}\r\n              onClick={toggleRecording}\r\n            >\r\n              {isRecording ? <MicOff className=\"w-5 h-5\" /> : <Mic className=\"w-5 h-5\" />}\r\n              <span className=\"sr-only\">{isRecording ? \"Stop recording\" : \"Start voice input\"}</span>\r\n            </button>\r\n          </div>\r\n\r\n          <input type=\"file\" className=\"hidden\" ref={fileInputRef} onChange={handleFileSelect} />\r\n\r\n          <Textarea\r\n            placeholder=\"Type a message or use voice input...\"\r\n            className={cn(\r\n              \"bg-transparent w-full border-none focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n              \"placeholder:text-gray-400 dark:placeholder:text-gray-500\",\r\n              \"text-black dark:text-white px-3 py-2\",\r\n              \"text-sm\",\r\n              \"max-h-[200px] overflow-y-auto resize-none\",\r\n              \"min-h-[52px]\",\r\n            )}\r\n            ref={textareaRef}\r\n            value={inputValue}\r\n            onChange={(e) => {\r\n              setInputValue(e.target.value)\r\n              adjustHeight()\r\n            }}\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\" && !e.shiftKey) {\r\n                e.preventDefault()\r\n                handleSubmit()\r\n              }\r\n            }}\r\n          />\r\n\r\n          <div className=\"px-3 pb-2 flex justify-end\">\r\n            <button\r\n              className={cn(\r\n                \"rounded-full p-2 transition-colors\",\r\n                inputValue.trim()\r\n                  ? \"bg-blue-500 hover:bg-blue-600 text-white\"\r\n                  : \"bg-gray-200 dark:bg-gray-700 text-gray-400 dark:text-gray-500\",\r\n              )}\r\n              type=\"button\"\r\n              onClick={handleSubmit}\r\n              disabled={!inputValue.trim()}\r\n            >\r\n              <SendHorizontal className=\"w-4 h-4\" />\r\n              <span className=\"sr-only\">Send message</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "path": "/components/eatechUI/ai-input/ai-input-04.tsx",
      "target": "/components/eatechUI/ai-input-04.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}