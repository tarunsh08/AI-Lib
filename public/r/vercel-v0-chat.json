{
  "name": "vercel-v0-chat",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "textarea"
  ],
  "registryDependencies": [],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useAutoResizeTextarea } from \"@/hooks/use-auto-resize-textarea\";\r\nimport {\r\n    ImageIcon,\r\n    FileUp,\r\n    Figma,\r\n    MonitorIcon,\r\n    CircleUserRound,\r\n    ArrowUpIcon,\r\n    Paperclip,\r\n    PlusIcon,\r\n} from \"lucide-react\";\r\n\r\nexport function VercelV0Chat() {\r\n    const [value, setValue] = useState(\"\");\r\n    const { textareaRef, adjustHeight } = useAutoResizeTextarea({\r\n        minHeight: 60,\r\n        maxHeight: 200,\r\n    });\r\n\r\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n        if (e.key === \"Enter\" && !e.shiftKey) {\r\n            e.preventDefault();\r\n            if (value.trim()) {\r\n                setValue(\"\");\r\n                adjustHeight(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col items-center w-full max-w-4xl mx-auto p-4 space-y-4 sm:space-y-8\">\r\n            <h1 className=\"text-2xl sm:text-4xl font-bold text-black dark:text-white text-center\">\r\n                What can I help you ship?\r\n            </h1>\r\n\r\n            <div className=\"w-full\">\r\n                <div className=\"relative bg-neutral-900 rounded-xl border border-neutral-800\">\r\n                    <div className=\"overflow-y-auto\">\r\n                        <Textarea\r\n                            ref={textareaRef}\r\n                            value={value}\r\n                            onChange={(e) => {\r\n                                setValue(e.target.value);\r\n                                adjustHeight();\r\n                            }}\r\n                            onKeyDown={handleKeyDown}\r\n                            placeholder=\"Ask v0 a question...\"\r\n                            className={cn(\r\n                                \"w-full px-4 py-3\",\r\n                                \"resize-none\",\r\n                                \"bg-transparent\",\r\n                                \"border-none\",\r\n                                \"text-white text-sm\",\r\n                                \"focus:outline-none\",\r\n                                \"focus-visible:ring-0 focus-visible:ring-offset-0\",\r\n                                \"placeholder:text-neutral-500 placeholder:text-sm\",\r\n                                \"min-h-[60px]\"\r\n                            )}\r\n                            style={{\r\n                                overflow: \"hidden\",\r\n                            }}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between p-3\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"group p-2 hover:bg-neutral-800 rounded-lg transition-colors flex items-center gap-1\"\r\n                            >\r\n                                <Paperclip className=\"w-4 h-4 text-white\" />\r\n                                <span className=\"text-xs text-zinc-400 hidden group-hover:inline transition-opacity\">\r\n                                    Attach\r\n                                </span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"flex items-center gap-2\">\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"px-2 py-1 rounded-lg text-sm text-zinc-400 transition-colors border border-dashed border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\"\r\n                            >\r\n                                <PlusIcon className=\"w-4 h-4\" />\r\n                                Project\r\n                            </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={cn(\r\n                                    \"px-1.5 py-1.5 rounded-lg text-sm transition-colors border border-zinc-700 hover:border-zinc-600 hover:bg-zinc-800 flex items-center justify-between gap-1\",\r\n                                    value.trim()\r\n                                        ? \"bg-white text-black\"\r\n                                        : \"text-zinc-400\"\r\n                                )}\r\n                            >\r\n                                <ArrowUpIcon\r\n                                    className={cn(\r\n                                        \"w-4 h-4\",\r\n                                        value.trim()\r\n                                            ? \"text-black\"\r\n                                            : \"text-zinc-400\"\r\n                                    )}\r\n                                />\r\n                                <span className=\"sr-only\">Send</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-4 -mx-4 px-4 sm:mx-0 sm:px-0\">\r\n                    <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-3 sm:overflow-x-auto sm:pb-2 sm:justify-center scrollbar-hide\">\r\n                        <ActionButton\r\n                            icon={<ImageIcon className=\"w-4 h-4\" />}\r\n                            label=\"Clone a Screenshot\"\r\n                        />\r\n                        <ActionButton\r\n                            icon={<Figma className=\"w-4 h-4\" />}\r\n                            label=\"Import from Figma\"\r\n                        />\r\n                        <ActionButton\r\n                            icon={<FileUp className=\"w-4 h-4\" />}\r\n                            label=\"Upload a Project\"\r\n                        />\r\n                        <ActionButton\r\n                            icon={<MonitorIcon className=\"w-4 h-4\" />}\r\n                            label=\"Landing Page\"\r\n                        />\r\n                        <ActionButton\r\n                            icon={<CircleUserRound className=\"w-4 h-4\" />}\r\n                            label=\"Sign Up Form\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface ActionButtonProps {\r\n    icon: React.ReactNode;\r\n    label: string;\r\n}\r\n\r\nfunction ActionButton({ icon, label }: ActionButtonProps) {\r\n    return (\r\n        <button\r\n            type=\"button\"\r\n            className=\"flex items-center gap-2 w-full sm:w-auto px-3 sm:px-4 py-2 bg-neutral-900 hover:bg-neutral-800 rounded-full border border-neutral-800 text-neutral-400 hover:text-white transition-colors whitespace-nowrap flex-shrink-0\"\r\n        >\r\n            {icon}\r\n            <span className=\"text-xs\">{label}</span>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default VercelV0Chat;",
      "path": "/components/eatechUI/vercel-v0-chat.tsx",
      "target": "/components/eatechUI/vercel-v0-chat.tsx"
    },
    {
      "type": "registry:hook",
      "content": "\r\nimport { useEffect, useRef, useCallback } from \"react\";\r\n\r\ninterface UseAutoResizeTextareaProps {\r\n    minHeight: number;\r\n    maxHeight?: number;\r\n}\r\n\r\nexport function useAutoResizeTextarea({\r\n    minHeight,\r\n    maxHeight,\r\n}: UseAutoResizeTextareaProps) {\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n    const adjustHeight = useCallback(\r\n        (reset?: boolean) => {\r\n            const textarea = textareaRef.current;\r\n            if (!textarea) return;\r\n\r\n            if (reset) {\r\n                textarea.style.height = `${minHeight}px`;\r\n                return;\r\n            }\r\n\r\n            textarea.style.height = `${minHeight}px`;\r\n\r\n            const newHeight = Math.max(\r\n                minHeight,\r\n                Math.min(\r\n                    textarea.scrollHeight,\r\n                    maxHeight ?? Number.POSITIVE_INFINITY\r\n                )\r\n            );\r\n\r\n            textarea.style.height = `${newHeight}px`;\r\n        },\r\n        [minHeight, maxHeight]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const textarea = textareaRef.current;\r\n        if (textarea) {\r\n            textarea.style.height = `${minHeight}px`;\r\n        }\r\n    }, [minHeight]);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => adjustHeight();\r\n        window.addEventListener(\"resize\", handleResize);\r\n        return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, [adjustHeight]);\r\n\r\n    return { textareaRef, adjustHeight };\r\n}",
      "path": "/hooks/use-auto-resize-textarea.ts",
      "target": "/hooks/use-auto-resize-textarea.ts"
    }
  ]
}